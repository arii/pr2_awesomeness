<launch>

  <!-- set stereo to true for narrow stereo, false for kinect -->
  <arg name="stereo" default="false" />
  <arg name="cvfh" default="false" />
  <arg name="tod" default="false" />
  <arg name="model_set" default="SUSHI_MODEL_SET"/>
  <arg name="joy" default="false" />
  <!-- if you want to navigate, use nav:=true -->
  <arg name="nav" default="false" />
  <!-- adding wg (on top of nav) will broadcast a map of Willow Garage -->
  <arg name="wg" default="false" />
  <!-- add nav_local (on top of nav) if you have no map and want to just use sensor data -->
  <arg name="nav_local" default="false" />
  <!-- add nav_3d (on top of nav) if you don't want to switch nav planners (used for sushi) --> 
  <arg name="nav_3d" default="false" />
  <!-- add nav_slam if you are making a 2d map -->
  <arg name="nav_slam" default="false" />
  <arg name="use_slip_controllers" default="false"/>
  <arg name="use_probabilistic_grasp_planner" default="false"/>
  <arg name="log_to_warehouse" default="false"/>
  <arg name="do_preplan_scan" default="false"/>
  <arg name="do_monitoring" default="false"/>
  <arg name="use_right_arm" default="true" />
  <arg name="use_left_arm"  default="true" />
  <!-- use sim if you're in simulation and don't want to run openni_node -->
  <arg name="sim" default="false" />
  <arg name="flatten_table" default="true"/>	
  <arg name="tf_throttled" default="true"/>	
  <arg name="jpeg_quality" default="40"/>	
  <arg name="use_jinv" default="false" />
  <arg name="slow_movement" default="false" />
  <arg name="throttle_cameras" default="true" />
  <arg name="im_debug" default="false" />
  <arg name="reactive_grasping" default="false" />		
  <arg name="compress_point_clouds" default="false" />
  <arg name="new_object_rec" default="false" />

  <!-- assumes Kinect frame names end in _rgb_optical_frame and _ir_optical_frame -->
  <arg name="kinect_frame_prefix" default="/head_mount_kinect" />  
  <arg name="kinect_camera_name" default="head_mount_kinect" />

  <!-- set the name of the main camera -->
  <arg if="$(arg stereo)" name="main_camera_namespace" value="/wide_stereo/left"/>
  <arg if="$(arg stereo)" name="main_camera_name" value="image_color"/>
  <arg unless="$(arg sim)" name="tmp_camera_namespace" value="$(arg kinect_camera_name)/rgb"/>
  <arg unless="$(arg sim)" name="tmp_camera_name" value="image_color"/>
  <arg if="$(arg sim)" name="tmp_camera_namespace" value="$(arg kinect_camera_name)/rgb"/>
  <arg if="$(arg sim)" name="tmp_camera_name" value="image_raw"/>
  <arg unless="$(arg stereo)" name="main_camera_namespace" value="$(arg tmp_camera_namespace)"/>
  <arg unless="$(arg stereo)" name="main_camera_name" value="$(arg tmp_camera_name)"/>
  <arg name="main_camera" value="$(arg main_camera_namespace)/$(arg main_camera_name)"/>

  <!-- use the lcg gripper on the pr2 -->
  <arg name="lcg_left_gripper" default="false"/>
  <arg name="lcg_right_gripper" default="false"/>

  <!-- grasping study -->
  <arg name="interface" default="0"/>
  <arg name="task" default="0"/>
  <param name="interactive_grasping/interface_number" type="int" value="$(arg interface)"/>
  <param name="interactive_grasping/task_number" type="int" value="$(arg task)"/>

  <!-- rviz camera configurations -->
  <rosparam command="load" file="$(find pr2_object_manipulation_launch)/config/camera_configurations.yaml"/>

  <arg if="$(arg im_debug)" name="im_prefix" value="xterm -e gdb -ex run --args"/>
  <arg unless="$(arg im_debug)" name="im_prefix" value=""/>

<!-- REMOVED INCLUDES AND NODES  -->
  <!-- REMOVED  point cloud compression -->
  <!-- REMOVED interactive manipulation backend -->
  <!-- REMOVED tuckarm -->

  <!-- REMOVED run image_rotate for both forearm camera images -->
  <!-- REMOVED bring down compression for images, so it works over wifi -->

  <!-- REMOVED Start joystick teleop listener (won't work with navigation) -->
  <!-- REMOVED Interactive markers for recognized objects -->
  <!-- REMOVED Interactive Marker Teleop -->

  <!-- REMOVED pr2_interactive_gripper_pose_action -->
  <!-- REMOVED cloud server -->
  
  <!-- REMOVED in-hand object modeling -->
  
  <!-- REMOVED grasp_adjust action server -->
  
  <!-- REMOVED segmented_clutter_grasp_planner action server -->

  <!-- REMOVED  reachable zones marker broadcaster -->


<!--  include files and nodes  -->

  <include file="$(find pr2_teleop)/teleop_joystick.launch"/>

  <!-- Large AR tags -->
<group unless="$(arg sim)">
    <arg name="marker_size" default="7" />
    <arg name="max_new_marker_error" default="0.08" />
    <arg name="max_track_error" default="0.2" />

    <arg name="cam_image_topic" default="/head_mount_kinect/depth_registered/points" />
    <arg name="cam_info_topic" default="/head_mount_kinect/rgb/camera_info" />		
    <arg name="output_frame" default="/base_link" />
          <!--
           <include file="$(find openni_launch)/launch/openni.launch">
            <arg name="depth_registration" value="true"/>
            <arg name="camera" value="head_mount_kinect"/>
            <arg name="rgb_frame_id" value="/head_mount_kinect_rgb_optical_frame"/>
            <arg name="depth_frame_id" value="/head_mount_kinect_depth_optical_frame"/>
            <arg name="publish_tf" value="false"/>
           </include >
          -->
    <node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkers" respawn="false" args="$(arg marker_size) $(arg max_new_marker_error) $(arg max_track_error) $(arg cam_image_topic) $(arg cam_info_topic) $(arg output_frame)" />
</group>
  <!-- gripper sensor action -->
<group unless="$(arg sim)">
<include file="$(find pr2_gripper_sensor_action)/launch/pr2_gripper_sensor_actions.launch"/>
</group>

  <!-- ik action -->
      <!--
      <node pkg="pr2_arm_move_ik" type="arm_ik" name="l_arm_ik" output="screen">
      <param name="joint_trajectory_action" value="/l_arm_controller/joint_trajectory_generator" />
      <param name="arm" value="l" />
      <param name="free_angle" value="2" />
      <param name="search_discretization" value="0.01" />
      <param name="ik_timeout" value="5.0" />
    </node>
    <node pkg="pr2_arm_move_ik" type="arm_ik" name="r_arm_ik" output="screen">
      <param name="joint_trajectory_action" value="/r_arm_controller/joint_trajectory_generator" />
      <param name="arm" value="r" />
      <param name="free_angle" value="2" />
      <param name="search_discretization" value="0.01" />
      <param name="ik_timeout" value="5.0" />
    </node>
    -->
 
  <!-- Trajectory generator -->
    <node pkg="joint_trajectory_generator" type="joint_trajectory_generator" output="screen"
          name="joint_trajectory_generator" ns="r_arm_controller" >
      <param name="max_acc" value="2.0" />
      <param name="max_vel" value="2.5" />
    </node>
    <node pkg="joint_trajectory_generator" type="joint_trajectory_generator" output="screen"
          name="joint_trajectory_generator" ns="l_arm_controller" >
      <param name="max_acc" value="2.0" />
      <param name="max_vel" value="2.5" />
    </node>
  
  <!-- manipulation prerequisites -->
   <include file="$(find pr2_object_manipulation_launch)/launch/pr2_manipulation_prerequisites.launch">
      <arg name="stereo" value="$(arg stereo)"/>
      <arg name="use_right_arm" value="$(arg use_right_arm)"/>
      <arg name="use_left_arm" value="$(arg use_left_arm)"/>
      <arg name="log_to_warehouse" value="$(arg log_to_warehouse)"/>
      <arg name="do_monitoring" value="$(arg do_monitoring)"/>
      <arg name="do_preplan_scan" value="$(arg do_preplan_scan)"/>
      <arg name="kinect_frame_prefix" value="$(arg kinect_frame_prefix)"/>
      <arg name="kinect_camera_name" value="$(arg kinect_camera_name)"/>
      <arg name="sim" value="$(arg sim)"/>
      <arg name="tod" value="$(arg tod)"/>
    </include>
  <!-- manipulation -->
    <include file="$(find pr2_object_manipulation_launch)/launch/pr2_manipulation.launch">
      <arg name="use_slip_controllers" value="$(arg use_slip_controllers)"/>
      <arg name="use_right_arm" value="$(arg use_right_arm)"/>
      <arg name="use_left_arm" value="$(arg use_left_arm)"/> 
      <arg name="sim" value="$(arg sim)"/>
      <arg name="use_jinv" value="$(arg use_jinv)"/>
      <arg name="use_probabilistic_grasp_planner" value="$(arg use_probabilistic_grasp_planner)"/>
      <arg name="reactive_grasping" value="$(arg reactive_grasping)" />
      <arg name="lcg_left_gripper" value="$(arg lcg_left_gripper)"/>
      <arg name="lcg_right_gripper" value="$(arg lcg_right_gripper)"/>
    </include>


<!-- Object Detection and sensor data assembler -->
  <arg name="high_res" default="true"/>
  
  <!-- database communication node -->
    <rosparam command="load" file="$(find household_objects_database)/config/localhost.yaml"/>
    <node pkg="household_objects_database" name="objects_database_node" type="objects_database_node" 
      respawn="true" output="screen">
      <param if="$(arg lcg_left_gripper)" name="grasp_ordering_method" value="quality"/>
      <param unless="$(arg lcg_left_gripper)" name="grasp_ordering_method" value="random"/>
    </node>


  <!-- Kinect -->
  <group unless="$(arg stereo)">
    <!-- RGB-D assembly -->
    <include file="$(find rgbd_assembler)/launch/rgbd_kinect_assembler.launch">
      <arg name="kinect_camera_name" value="$(arg kinect_camera_name)"/>
      <arg name="high_res" value="$(arg high_res)"/>      
	  <arg name="sim" value="$(arg sim)"/>
    </include>

    <!-- Launch default tabletop detector -->
    <include file="$(find tabletop_object_detector)/launch/tabletop_complete.launch">
      <arg name="tabletop_segmentation_points_input" value="$(arg kinect_camera_name)/depth_registered/points"/>
      <arg name="flatten_table" value="$(arg flatten_table)"/>	
      <arg name="model_set" value="$(arg model_set)"/> 
    </include>
  </group>

  
  <!-- tabletop collision map processing -->
    <node pkg="tabletop_collision_map_processing" name="tabletop_collision_map_processing" 
          type="tabletop_collision_map_processing_node" respawn="false" output="screen">
      <param name="get_model_mesh_srv" value="/objects_database_node/get_model_mesh" />
      <param name="static_map_cloud_name" value="full_cloud_filtered" />
      <param name="table_thickness" value="0.01" />
    </node>



    <rosparam file="$(find ee_cart_imped_control)/pr2_arms_cart_imped_controller.yaml" command="load" />
    
    <!-- Left arm -->
    <node pkg="pr2_controller_manager" type="spawner" args="l_arm_cart_imped_controller" name="l_arm_cart_imped_controller_spawner" output="screen"/>
    <group ns="l_arm_cart_imped_controller">
	       <node pkg="ee_cart_imped_action" name="l_arm_cart_imped_action_node" type="ee_cart_imped_action" output="screen"/>
	</group>
    <!-- Right arm -->
    <rosparam file="$(find ee_cart_imped_control)/pr2_arms_cart_imped_controller.yaml" command="load" />
    <node pkg="pr2_controller_manager" type="spawner" args="r_arm_cart_imped_controller" name="r_arm_cart_imped_controller_spawner" output="screen"/>
    <group ns="r_arm_cart_imped_controller">
	       <node pkg="ee_cart_imped_action" name="r_arm_cart_imped_action_node" type="ee_cart_imped_action" output="screen"/>
	</group>


</launch>
